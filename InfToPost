#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#define Max 1000

struct Stack {
    int curIndex;
    char arr[Max];
};

void Push(char value, struct Stack * curStack){
    curStack->curIndex++;
    if(curStack->curIndex < Max){
        curStack->arr[curStack->curIndex] = value;
    }else{
        curStack->curIndex--;
        printf("Stack overflow!\n");
    }
}

char Pop(struct Stack * curStack){
    if(curStack->curIndex > -1){
        return curStack->arr[curStack->curIndex--];
    }
    else
    {
        printf("Stack is empty!\n");
        return '0';
    }
}

bool StackIsEmpty(struct Stack * curStack){
    
    if(curStack->curIndex < 0){
        return true;
    }
    return false;
}

int isNumber(char ch){
    if(ch > '0' && ch <= '9'){
        return true;
    }
    else{
        return false;
    }
}

int GetOperatorPriority(char op){
    
    if(op == '/' || op == '*'){
        return 1;
    }
    else if(op == '+' || op == '-'){
        return 0;
    }
    
}

char InfixToPostfix(char infixExp[]){
    
    char postfixExp[Max];
    int postfixCurrIndex = 0;
    struct Stack postfixOperatorStack;
    
    for(int selectedCharIndex = 0; selectedCharIndex < strlen(infixExp); selectedCharIndex++){
        
        char SelectedChar = infixExp[selectedCharIndex];
        
        if(isNumber(infixExp[selectedCharIndex])){
            postfixExp[postfixCurrIndex++] = SelectedChar;
        }
        else if (StackIsEmpty(&postfixOperatorStack))
        {
            Push(SelectedChar, &postfixOperatorStack);
        }
        else
        {
            char PrevOperator = Pop(&postfixOperatorStack);
            if(GetOperatorPriority(PrevOperator) > GetOperatorPriority(SelectedChar)){
                postfixExp[postfixCurrIndex++] = PrevOperator;
                Push(SelectedChar, &postfixOperatorStack);
            }
            else{
                postfixExp[postfixCurrIndex++] = SelectedChar;
                Push(PrevOperator, &postfixOperatorStack);
            }
        }
        
    }
    
    return &postfixExp;
    
}

int main()
{
    //2+4*4/8*6+3+5*7
    char infixExp[Max] = "2+4*4/8*6+3+5*7";
    char postfixExp[Max] = InfixToPostfix(infixExp);
    printf("%s\n", );
    
    return 0;
}
